{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"047ff438-b9c4-5702-b3f3-9635579e7060","excerpt":"스토리보드  스토리보드 (동의어 : 화면정의서, 화면설계서, MMI(Man Machine Interface)) 디자이너/개발자가 참고하는 최종적인 산출 문서이다. 서비스 구축을 위한 모든 정보가 담겨져있는 문서. 스토리보드를 바탕으로 커뮤니케이션 진행한다. 완성해야할 앱서비스와 예상되는 UX를 미리보기 위한 방법론이다. 구성 : 정책 프로세스 와이어프레임 콘텐츠 구성 기능 정의 데이터 연동 스토리보드 템플릿 와이어프레임   화면 단위의 레이아웃 설계 작업. 서비스의 간략한 흐름을 공유하기 위함. 큰 틀을 디자인하는데에 집중 툴 : 손그림, 파워포인트, 키노트,스케치,일러스트,포토샵 등 Layout UI UX 목업  실물과 흡사한 정적인 형태의 모형  실제 서비스와 흡사한 모형을 만듬. 와이어프레임이나 스토리보드에 인터렉션을 적용함으로 실제 구현된 것 처럼 시뮬레이션. 최종 제품을 미들 피델리티에서 하이 피델리티 사이의 품질로 재현한 것으로, 유저 인터페이스의 상호 작용을 시뮬레이션…","frontmatter":{"categories":"frontend","title":"StoryBoard가 무엇인가?","date":"March 26, 2022"},"fields":{"slug":"/frontend-00/"}}},{"node":{"id":"af795767-3416-5d97-b7ca-ba688ce92929","excerpt":"의미 있는 이름 소프트웨어에서 이름은 무조건 쓰인다. 변수, 함수, 인수, 클래스, 패키지 등 안쓰는 곳이 없다. 여기저기 도처에서 개발자는 작명을 하기 때문에 작명을 잘 하면 그만큼 효율적이다. 의도를 분명하게 해당 함수든, 인수든, 변수든 뭐든간에 이름에서 의도를 분명히 밝혀야 한다. 좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 절약하는 시간이 훨씬 더 많다. 프로젝트가 진행되는 도중이라도 더 나은 이름이 떠오르면 개선하여 사용하는 것도 좋다. 이런 코드는 아무런 의미도 드러나지 않는다. 도대체 뭐하는 변수인지 코드 전체를 훑어야 이해할 수 있다. 이렇게 의도가 드러나는 이름을 사용하면 누구나 봐도 이해가 쉽다. 복잡한 코드의 맥락이 코드 자체에 명시적으로 드러나지 않는다. 따라서 각 변수에 이름만 설명해도 코드가 나아진다. 그릇된 정보는 배제 프로그래머는 코드에 그릇된 단서를 남겨서는 안 된다. 나름대로 널리 쓰이는 의미가 있는 단어를 다른 의미로 사용해서도 안된다. …","frontmatter":{"categories":"아키텍처","title":"Clean Code 02 : 이름 짓기","date":"February 04, 2022"},"fields":{"slug":"/clean-code-01/"}}},{"node":{"id":"f90eb5db-d460-500f-9f5f-d886384279c1","excerpt":"자바가 잠식한 한국 개발 시장에서 코틀린은 아직까지 많은 사람들이 사용하지는 않지만, 효율과 능률을 중시하는 프로그래밍 사회에서 가능성 있는 새로운 언어를 조금은 배워 손해볼 것은 없다. 특히 국내 일부 유니콘 기업들이 코틀린을 조금씩 도입하는 것은 한국의 자바 시장에 코틀린이 조금식 들어오고 있다는 것을 보여준다. 코틀린은 간단한 JVM으로 돌아가는 언어라고 표현하기에는 개발자를 위해 섬세하게 고려하여 개발됐다는 것을 알 수 있다. 따라서 코틀린 시리즈로 한번 코틀린을 파해쳐볼까 한다. 1. 코틀린은 무엇인가? 자바 플랫폼에서 돌아가는 프로그래밍 언어로, 간결하고 실용적이며 자바 코드와의 상호운용성을 중시한다. 자바가 운용되는 곳이면 거의 대부분 코틀린으로 대체 가능하며 성능도 자바와 거의 동일하다. 2. 탄생 계기 C#을 부러워하던 Jetbrains팀은 IntelliJ와 여러 IDE의 기반인 자바를 버릴 수 없었기 때문에 자체적으로 자바를 대체하는 언어를 만들고자 하였는데 거기…","frontmatter":{"categories":"코틀린","title":"Kotlin 01 : 코틀린은 무엇인가?","date":"December 30, 2021"},"fields":{"slug":"/koltin-00/"}}},{"node":{"id":"68a20b11-502e-512d-be8d-c279c543a689","excerpt":"모두가 클린 코드를 작성하라고 하지만, 그 이유를 알기는 쉽지 않다. 코더들은 언어를 이해하는 데에 집중하고 아키텍처는 추후에 공부하면 되지 않겠냐는 생각이 태반일 것이다. 나 또한 그랬으며 아키텍처라는 이야기 자체가 사실 중요하다고 생각하지만 그것이 개발자 꿈나무로서 프로그래밍에 적극적으로 관여한다는 사실을 알지 못했다. 로버트 C. 마틴의 클린코드 : 애자일 소프트웨어 장인정신의 1장에서는 클린 코드를 왜 해야하는지, 클린 코드를 시작하기 전 생각해야할 가장 중요한 이야기를 다룬다. 클린 코드 책을 추천하는 이유 “사소한 곳에서 발휘하는 정직은 사소하지 않다” 옛날 덴마크 속담을 이야기한 제임스 O. 코플리엔은 추천사를 한 문장으로 표현할 수 있다고 설명한다. 클린 코드의 책은 사소한 것 같지만 사소하지 않은 내용을 다룬다고 한다. 지속적인 개선과 보살핌은 결코 끝나지 않는다. “처음 왔을 때보다 캠프장을 더 깨끗이 치우고 떠나려고” 최선을 다했는가? 클린 코드라는 것은 코드의…","frontmatter":{"categories":"아키텍처","title":"Clean Code 01 : 개발자가 클린코드를 작성해야 하는 이유","date":"December 21, 2021"},"fields":{"slug":"/clean-code-00/"}}},{"node":{"id":"7f95adc1-81f5-5c96-9f88-bf172a058c8b","excerpt":"안녕하세요 컴퓨터 공학을 전공하는 대학생 영건입니다.\n소프트웨어를 공부하고 지식을 공유하고자 블로그를 개설하였습니다.\n여러가지 공부한 것들을 적고자합니다.","frontmatter":{"categories":"일반","title":"새로운 블로그","date":"December 20, 2021"},"fields":{"slug":"/new-blog-jadru/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"영건","bio":{"role":"대학생","description":["프로그래머","엔지니어"],"thumbnail":"profile.png"},"social":{"github":"https://github.com/jadru","linkedIn":"https://www.linkedin.com/in/younggunii","email":"ygpark0922@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}