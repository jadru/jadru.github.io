{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/아키텍처",
    "result": {"pageContext":{"currentCategory":"아키텍처","categories":["All","frontend","아키텍처","코틀린","일반"],"edges":[{"node":{"id":"af795767-3416-5d97-b7ca-ba688ce92929","excerpt":"의미 있는 이름 소프트웨어에서 이름은 무조건 쓰인다. 변수, 함수, 인수, 클래스, 패키지 등 안쓰는 곳이 없다. 여기저기 도처에서 개발자는 작명을 하기 때문에 작명을 잘 하면 그만큼 효율적이다. 의도를 분명하게 해당 함수든, 인수든, 변수든 뭐든간에 이름에서 의도를 분명히 밝혀야 한다. 좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 절약하는 시간이 훨씬 더 많다. 프로젝트가 진행되는 도중이라도 더 나은 이름이 떠오르면 개선하여 사용하는 것도 좋다. 이런 코드는 아무런 의미도 드러나지 않는다. 도대체 뭐하는 변수인지 코드 전체를 훑어야 이해할 수 있다. 이렇게 의도가 드러나는 이름을 사용하면 누구나 봐도 이해가 쉽다. 복잡한 코드의 맥락이 코드 자체에 명시적으로 드러나지 않는다. 따라서 각 변수에 이름만 설명해도 코드가 나아진다. 그릇된 정보는 배제 프로그래머는 코드에 그릇된 단서를 남겨서는 안 된다. 나름대로 널리 쓰이는 의미가 있는 단어를 다른 의미로 사용해서도 안된다. …","fields":{"slug":"/clean-code-01/"},"frontmatter":{"categories":"아키텍처","title":"Clean Code 02 : 이름 짓기","date":"February 04, 2022"}},"next":{"fields":{"slug":"/koltin-00/"}},"previous":{"fields":{"slug":"/frontend-00/"}}},{"node":{"id":"68a20b11-502e-512d-be8d-c279c543a689","excerpt":"모두가 클린 코드를 작성하라고 하지만, 그 이유를 알기는 쉽지 않다. 코더들은 언어를 이해하는 데에 집중하고 아키텍처는 추후에 공부하면 되지 않겠냐는 생각이 태반일 것이다. 나 또한 그랬으며 아키텍처라는 이야기 자체가 사실 중요하다고 생각하지만 그것이 개발자 꿈나무로서 프로그래밍에 적극적으로 관여한다는 사실을 알지 못했다. 로버트 C. 마틴의 클린코드 : 애자일 소프트웨어 장인정신의 1장에서는 클린 코드를 왜 해야하는지, 클린 코드를 시작하기 전 생각해야할 가장 중요한 이야기를 다룬다. 클린 코드 책을 추천하는 이유 “사소한 곳에서 발휘하는 정직은 사소하지 않다” 옛날 덴마크 속담을 이야기한 제임스 O. 코플리엔은 추천사를 한 문장으로 표현할 수 있다고 설명한다. 클린 코드의 책은 사소한 것 같지만 사소하지 않은 내용을 다룬다고 한다. 지속적인 개선과 보살핌은 결코 끝나지 않는다. “처음 왔을 때보다 캠프장을 더 깨끗이 치우고 떠나려고” 최선을 다했는가? 클린 코드라는 것은 코드의…","fields":{"slug":"/clean-code-00/"},"frontmatter":{"categories":"아키텍처","title":"Clean Code 01 : 개발자가 클린코드를 작성해야 하는 이유","date":"December 21, 2021"}},"next":{"fields":{"slug":"/new-blog-jadru/"}},"previous":{"fields":{"slug":"/koltin-00/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}